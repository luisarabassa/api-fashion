// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String    @id @default(uuid()) @db.VarChar(36)
  nome      String    @db.VarChar(60)
  email     String    @db.VarChar(40)
  senha     String    @db.VarChar(60)
  nivel     Int       @default(2) @db.SmallInt
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  vendas    Venda[]
  produtos  Produto[]
  logs      Log[]

  @@map("admins")
}

model Cliente {
  id        String   @id @default(uuid()) @db.VarChar(36)
  nome      String   @db.VarChar(30)
  email     String   @unique() @db.VarChar(100)
  senha     String   @db.VarChar(60)
  cidade    String   @db.VarChar(40)
  telefone  String   @db.VarChar(15)
  endereco  String?  @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  vendas    Venda[]

  @@map("clientes")
}

model Produto {
  id         Int      @id @default(autoincrement())
  cor        String   @db.VarChar(20)
  marca      String?  @db.VarChar(20)
  material   String?  @db.VarChar(20)
  valor      Decimal  @db.Decimal(10, 2)
  foto       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  favorito   Boolean  @default(false)
  tamanho    Tamanhos @default(M)
  tipo       Tipos    @default(BLUSA)
  vendas     Venda[]
  admin      Admin?   @relation(fields: [adminId], references: [id])
  adminId    String?  @db.VarChar(36)
  ativo      Boolean  @default(true)

  @@map("produtos")
}

enum Tamanhos {
  PP
  P
  M
  G
  GG
  G1
}

enum Tipos {
  JAQUETA
  CALCA
  BLUSA
  ACESSORIO
  SAIA
  VESTIDO
  BOLSA
  CALCADO
}

model Venda {
  id        Int          @id @default(autoincrement())
  cliente   Cliente      @relation(fields: [clienteId], references: [id])
  clienteId String
  produto   Produto      @relation(fields: [produtoId], references: [id])
  produtoId Int
  valor     Decimal      @db.Decimal(10, 2)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Admin     Admin?       @relation(fields: [adminId], references: [id])
  adminId   String?      @db.VarChar(36)
  pagamento Pagamentos
  status    StatusPedido @default(PENDENTE)

  @@map("vendas")
}

enum Pagamentos {
  PIX
  DEBITO
  CREDITO
}

enum StatusPedido {
  PENDENTE
  ENVIADO
  ENTREGUE
  CANCELADO
}

model Log {
  id          Int      @id @default(autoincrement())
  Admin       Admin?   @relation(fields: [adminId], references: [id])
  adminId     String?  @db.VarChar(36)
  descricao   String   @db.VarChar(60)
  complemento String   @db.VarChar(200)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("logs")
}
